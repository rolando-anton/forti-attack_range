---
- name: Set domain root
  set_fact:
    domain_root_path: DC={{ dc_domain.split('.') | join(',DC=') }}

- name: Create root OU
  win_dsc:
    resource_name: xADOrganizationalUnit
    Name: "{{ root_ou }}"
    Path: "{{ domain_root_path }}" 
    ProtectedFromAccidentalDeletion: no
    Ensure: Present

- name: Set root OU path
  set_fact:
    parent_ou: "OU={{ root_ou }}, {{ domain_root_path }}"

- name: Create child OUs
  win_dsc:
    resource_name: xADOrganizationalUnit
    Name: "{{ item }}"
    Path: "{{ parent_ou }}"
    ProtectedFromAccidentalDeletion: no
    Ensure: Present
  register: child_ou
  with_items: "{{ child_ous }}"

- name: Create Employees Groups
  win_domain_group:
    name: "{{ item }}-Employees"
    scope: global
    ignore_protection: yes
    path: "OU={{ item }}, {{ parent_ou }}"
    state: Present
  with_items: "{{ child_ous }}"

- name: Create Managers Groups
  win_domain_group:
    name: "{{ item }}-Managers"
    scope: global
    ignore_protection: yes
    path: "OU={{ item }}, {{ parent_ou }}"
    state: Present
  with_items: "{{ child_ous }}"

- name: Check if Servers OU exists
  win_shell: Get-ADOrganizationalUnit -Identity "OU=Servers,{{ domain_root_path }}"
  register: servers_ou
  changed_when: false
  ignore_errors: true
- debug: var=servers_ou

- name: Creating Servers OU
  win_shell: New-ADOrganizationalUnit -Name "Servers"
  when: servers_ou is failed

- name: Check if Workstations OU exists
  win_shell: Get-ADOrganizationalUnit -Identity "OU=Workstations,{{ domain_root_path }}"
  register: ws_ou
  changed_when: false
  ignore_errors: true
- debug: var=ws_ou

- name: Creating Workstations OU
  win_shell: New-ADOrganizationalUnit -Name "Workstations"
  when: ws_ou is failed

